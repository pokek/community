<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tencent.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <insert id="insertMessage">
        insert into message (<include refid="insertFields"></include>) values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <update id="updateMessage">
        update message set status = #{status} where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectMessageByUserId" resultType="com.tencent.community.domain.Message">
        select <include refid="selectFields"></include>
        from message  where id in
            (
                 select max(id) as mid
                 from message
                 where status != 2
                   and from_id != 1
                   and (from_id = #{userId} or to_id = #{userId})
                group by conversation_id
             )
        order by id desc limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="java.lang.Integer">
        select count(mes.mid)
        from
        (
            select max(id) as mid
        from message
        where status != 2
        and from_id != 1
        and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id
            ) as mes
    </select>

    <select id="selectMessageByConversationId" resultType="com.tencent.community.domain.Message">
        select <include refid="selectFields"></include> from message where conversation_id = #{conversationId} and status != 2 and from_id != 1 order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectMessageCountByConversationId" resultType="java.lang.Integer">
        select count(id) from message where conversation_id = #{conversationId} and status != 2 and from_id != 1
    </select>

    <select id="selectMessageUnread" resultType="java.lang.Integer">
        select count(id) from message where to_id = #{userId} and status = 0 and from_id != 1
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <select id="findNewMessage" resultType="com.tencent.community.domain.Message">
        select <include refid="selectFields"></include> from message
        where id in (select max(id) from message where from_id = 1 and status != 2 and conversation_id = #{topic} and to_id = #{userId})
    </select>

    <select id="findTopicMessageCount" resultType="java.lang.Integer">
        select count(id) from message where from_id = 1 and status != 2 and conversation_id = #{topic} and to_id = #{userId}
    </select>

    <select id="findTopicMessageUnread" resultType="java.lang.Integer">
        select count(id) from message where from_id = 1 and status = 0 and to_id = #{userId}
        <if test="topic != null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="com.tencent.community.domain.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>


</mapper>